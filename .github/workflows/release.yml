
name: build/release
on:
  push:
    tags: ["*"]

jobs:
  build_release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: variables
      #   run: |
      #     echo ${{github.ref}}
      #     echo ${{ startsWith(github.ref, 'refs/tags/v') }}
      #     echo ${{ github.ref_name }}
      #     echo "Tag name from github.ref_name: ${{  github.ref_name }}"

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: '>=16.8.0'

      - name: apt-update
        if: startsWith(matrix.os, 'ubuntu-latest')
        run: sudo apt-get update

      - name: autoremove
        if: startsWith(matrix.os, 'ubuntu-latest')
        run: sudo apt autoremove

      - name: Install libarchive rpm on Linux
        if: startsWith(matrix.os, 'ubuntu-latest')
        run: sudo apt-get install libarchive-tools rpm

      - name: Build Electron app
        uses: coparse-inc/action-electron-builder@v1.0.0
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: false
          if: startsWith(matrix.os, 'windows-latest')
          args: --ia32 --x64

      - name: see directory
        run: |
          if [[ startsWith(matrix.os, 'windows-latest') ]]; then
            dir dist
          else
            ls ./dist
          fi
      
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   with:
      #     tag_name:  ${{ startsWith(github.ref, 'refs/tags/v') }}
      #     release_name: ${{ startsWith(github.ref, 'refs/tags/v') }}
      #     draft: true
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Upload Release Asset
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: ./dist/${{ startsWith(github.ref, 'refs/tags/v') }}
      #     asset_name: TJsonNotes-Setup-v1.1.0_win_x64.zip
      #     asset_content_type: application/zip

      - name: Create Release Asset
        uses: ncipollo/release-action@v1
        with:
          draft: true
          prerelease: false
          generateReleaseNotes: true
          if: startsWith(matrix.os, 'macos-latest')
          artifacts: |
            ./dist/latest*.yml
            ./dist/*.dmg
            ./dist/*.zip
          
          if: startsWith(matrix.os, 'linux-latest')
          artifacts: |
            ./dist/latest*.yml
            ./dist/*.AppImage
            ./dist/*.deb
            ./dist/*.freebsb
            ./dist/*.pacman
            ./dist/*.rpm
          
          if: startsWith(matrix.os, 'windows-latest')
          artifacts: |
            ./dist/latest*.yml
            ./dist/*.exe

      # - name: Create Release
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #     GH_REPO: ${{ github.repository }}
      #   run: |
      #     gh release create --draft "${{ github.ref_name }}" --title "${{ github.ref_name }}" --generate-notes 

      # - name: Upload Release Asset
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #     GH_REPO: ${{ github.repository }}
      #   run: |
      #     gh release upload "${{ github.ref_name }}" ./dist/*.exe
      #     gh release upload "${{ github.ref_name }}" ./dist/*.zip
      #     gh release upload "${{ github.ref_name }}" ./dist/*.tar.gz
      #     gh release upload "${{ github.ref_name }}" ./dist/*.dmg
      #     gh release upload "${{ github.ref_name }}" ./dist/*.snap
      #     gh release upload "${{ github.ref_name }}" ./dist/*.AppImage
      #     gh release upload "${{ github.ref_name }}" ./dist/*.deb
      #     gh release upload "${{ github.ref_name }}" ./dist/*.freebsb
      #     gh release upload "${{ github.ref_name }}" ./dist/*.pacman
      #     gh release upload "${{ github.ref_name }}" ./dist/*.rpm

      # - name: Upload Release Asset
      #   uses: softprops/action-gh-release@v1
      #   # if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     draft: true
      #     files: |
      #       ./dist/${{ github.ref_name }}/*.exe
      #       ./dist/${{ github.ref_name }}/*.zip
      #       ./dist/${{ github.ref_name }}/*.tar.gz
      #       ./dist/${{ github.ref_name }}/*.dmg
      #       ./dist/${{ github.ref_name }}/*.snap
      #       ./dist/${{ github.ref_name }}/*.AppImage
      #       ./dist/${{ github.ref_name }}/*.deb
      #       ./dist/${{ github.ref_name }}/*.freebsb
      #       ./dist/${{ github.ref_name }}/*.pacman
      #       ./dist/${{ github.ref_name }}/*.rpm
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # build_windows:
  #   runs-on: windows-latest
  #   needs: build_release
  #   permissions:
  #     contents: write
    
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Install Node.js, NPM and Yarn
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '>=16.8.0'

  #     - name: Build Electron app
  #       uses: coparse-inc/action-electron-builder@v1.0.0
  #       with:
  #         args: --ia32 --x64
  #         github_token: ${{ secrets.github_token }}
  #         release: false

  #     - name: see directory
  #       run: |
  #         dir dist
      
  #     - name: Create Release Asset
  #       uses: ncipollo/release-action@v1
  #       with:
  #         draft: true
  #         prerelease: false
  #         generateReleaseNotes: true
  #         artifacts: |
  #           ./dist/latest*.yml
  #           ./dist/*.exe